{
	"name": "Bronze to Silver",
	"properties": {
		"folder": {
			"name": "Medallion"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "06f46c2b-3a87-44e7-ae97-6a10a0b4fbec"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/de4c6b08-3d24-452b-80f7-97b7ce4e37d1/resourceGroups/Healthcare/providers/Microsoft.Synapse/workspaces/fauxuni/bigDataPools/smallSpark",
				"name": "smallSpark",
				"type": "Spark",
				"endpoint": "https://fauxuni.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.conf import SparkConf\r\n",
					"from pyspark.sql import SparkSession"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create Data Frame on Patient files\r\n",
					"patientsFile = \"abfs://dl-bronze@fauxunihealth.dfs.core.windows.net/patients/*.parquet\"\r\n",
					"dfPatients = spark.read.parquet(patientsFile)\r\n",
					"dfPatients.show(n=5)\r\n",
					"dfPatients.printSchema()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create Data Frame on Encounter files\r\n",
					"patientsFile = \"abfs://dl-bronze@fauxunihealth.dfs.core.windows.net/encounters/*.parquet\"\r\n",
					"dfEncounters = spark.read.parquet(patientsFile)\r\n",
					"dfEncounters.show(n=5)\r\n",
					"dfEncounters.printSchema()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					".whenMatchedUpdate(set = \r\n",
					"    {}).whenNotMatchedInsert( values = \r\n",
					"    {\r\n",
					"        \"countryOrRegion\" : \"hol_df_US.countryOrRegion\",\r\n",
					"        \"holidayName\" : \"hol_df_US.holidayName\",\r\n",
					"        \"normalizeHolidayName\" : \"hol_df_US.normalizeHolidayName\",\r\n",
					"        \"isPaidTimeOff\":\"hol_df_US.isPaidTimeOff\",\r\n",
					"        \"countryRegionCode\":\"hol_df_US.countryRegionCode\",\r\n",
					"        \"date\":\"hol_df_US.date\"\r\n",
					"    }\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Write Data into Silver using Delta Format\r\n",
					"silverTarget = \"abfs://dl-silver@fauxunihealth.dfs.core.windows.net/patients/\"\r\n",
					"dfSilverPatients = dfPatients.write \\\r\n",
					"                    .format(\"delta\") \\\r\n",
					"\r\n",
					"                    .save(silverTarget)\r\n",
					"\r\n",
					"dfSilverPatients.show()\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write Data into Silver using Delta Format\r\n",
					"silverTarget = \"abfs://dl-silver@fauxunihealth.dfs.core.windows.net/patients/\"\r\n",
					"dfSilverPatients = dfPatients.write.format(\"delta\").save(silverTarget)\r\n",
					"\r\n",
					"dfSilverPatients.show()\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"file = \"abfs://dl-bronze@fauxunihealth.dfs.core.windows.net/\"\r\n",
					"key = \"key\"\r\n",
					"appName = \"DataExtract\"\r\n",
					"master = \"local[*]\"\r\n",
					"sparkConf = SparkConf() \\\r\n",
					"    .setAppName(appName) \\\r\n",
					"    .setMaster(master) \\\r\n",
					"    .set(\"fs.azure.myaccount.key.myaccount.dfs.core.windows.net\", key)\r\n",
					"\r\n",
					"spark = SparkSession.builder.config(conf=sparkConf).getOrCreate()\r\n",
					"\r\n",
					"df = spark.read.text(file)\r\n",
					"df.show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Azure storage access info\r\n",
					"blob_account_name = \"fauxunihealth\"\r\n",
					"blob_container_name = \"dl-bronze\"\r\n",
					"blob_relative_path = \"\"\r\n",
					"blob_sas_token = r\"\"\r\n",
					"\r\n",
					"# Allow SPARK to read from Blob remotely\r\n",
					"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\r\n",
					"spark.conf.set(\r\n",
					"  'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
					"  blob_sas_token)\r\n",
					"print('Remote blob path: ' + wasbs_path)\r\n",
					"\r\n",
					"# SPARK read parquet, note that it won't load any data yet by now\r\n",
					"\r\n",
					"df = spark.read.parquet(wasbs_path)\r\n",
					"df.write.format(\"delta\").saveAsTable(\"diabetes\")\r\n",
					"     \r\n",
					"\r\n",
					""
				]
			}
		]
	}
}