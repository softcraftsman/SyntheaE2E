{
	"name": "Bronze to Silver",
	"properties": {
		"folder": {
			"name": "Medallion"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cecb792e-e44a-4bdb-bf2b-ac4176f67d62"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/de4c6b08-3d24-452b-80f7-97b7ce4e37d1/resourceGroups/Healthcare/providers/Microsoft.Synapse/workspaces/fauxuni/bigDataPools/smallSpark",
				"name": "smallSpark",
				"type": "Spark",
				"endpoint": "https://fauxuni.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfPatients.limit(1).show(vertical=True)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.conf import SparkConf\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"# Create Data Frame on Patient files\r\n",
					"patientsFile = \"abfs://dl-bronze@fauxunihealth.dfs.core.windows.net/patients/*.parquet\"\r\n",
					"dfPatients = spark.read.parquet(patientsFile)\r\n",
					"\r\n",
					"# Assign Column Names\r\n",
					"#       https://github.com/synthetichealth/synthea/wiki/CSV-File-Data-Dictionary#patients\r\n",
					"columnNames = ['Id','BirthDate','DeathDate','SSN','Drivers','Passport','Prefix','First','Last', \\\r\n",
					"                'Suffix','Maiden','Marital','Race','Ethnicity','Gender','BirthPlace',   \\\r\n",
					"                'Address','City','State','County','Zip','Lat','Long',  \\\r\n",
					"                'Healthcare_Expenses', 'Healthcare_Coverage', 'Income'  \\\r\n",
					"                ]\r\n",
					"dfPatients = dfPatients.toDF(*columnNames)          # https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/api/pyspark.sql.DataFrame.toDF.html\r\n",
					"\r\n",
					"# Remove Duplicates\r\n",
					"dfPatients = dfPatients.dropDuplicates()\r\n",
					"\r\n",
					"# Add Datatypes\r\n",
					"dfPatients = dfPatients.withColumn(dfPatients.BirthDate.cast('timestamp'))\r\n",
					"\r\n",
					"\r\n",
					"# Derived Columns\r\n",
					"dfPatients = dfPatients.withColumn('Age', ((datetime.today() - dfPatients.BirthDate) / 365.25).cast('int') )\r\n",
					"\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write Data into Silver using Delta Format\r\n",
					"silverTarget = \"abfs://dl-silver@fauxunihealth.dfs.core.windows.net/patients/\"\r\n",
					"dfSilverPatients = dfPatients.write \\\r\n",
					"                    .format(\"delta\") \\\r\n",
					"                    .mode(\"overwrite\") \\\r\n",
					"                    .save(silverTarget)\r\n",
					"\r\n",
					"dfSilverPatients.show()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}