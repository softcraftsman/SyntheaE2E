{
	"name": "1 - NOAA-NWM Example",
	"properties": {
		"folder": {
			"name": "NOAA"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e0cebe96-6f71-4445-bfc8-79e61438ee04"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/de4c6b08-3d24-452b-80f7-97b7ce4e37d1/resourceGroups/Healthcare/providers/Microsoft.Synapse/workspaces/fauxuni/bigDataPools/smallSpark",
				"name": "smallSpark",
				"type": "Spark",
				"endpoint": "https://fauxuni.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## National Water Model Example\r\n",
					"\r\n",
					"This notebook gives a brief introduction to the National Water Model data available from Azure Blob Storage. It uses [xarray](https://xarray.pydata.org/) and [adlfs](https://fsspec.github.io/adlfs) to load the NetCDF files and visualize the data. We'll work with the raw NetCDF data pushed to azure by [NODD](https://www.noaa.gov/information-technology/open-data-dissemination)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#%pip install jupyter-book\r\n",
					"#%pip install planetary-computer\r\n",
					"#%pip install xarray\r\n",
					"#%pip install h5netcdf\r\n",
					"#%pip install geopandas\r\n",
					"#%pip install contextily\r\n",
					"#%pip install mapclassify"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import adlfs\r\n",
					"import azure.storage.blob\r\n",
					"import planetary_computer\r\n",
					"import xarray as xr\r\n",
					"\r\n",
					"fs = adlfs.AzureBlobFileSystem(\r\n",
					"    \"noaanwm\", credential=planetary_computer.sas.get_token(\"noaanwm\", \"nwm\").token\r\n",
					")\r\n",
					"print(fs)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"A new set of files is produced every few hours. This example uses the files from 2023-01-23T00:00. We'll load a short-range forecast for the Continental United States."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"prefix = \"nwm/nwm.20230123\"\r\n",
					"\r\n",
					"ds = xr.open_dataset(\r\n",
					"    fs.open(f\"{prefix}/short_range/nwm.t00z.short_range.land.f001.conus.nc\")\r\n",
					")\r\n",
					"ds"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"We could have chosen a number of other products that `short_range.land` for the CONUS. https://planetarycomputer.microsoft.com/dataset/storage/noaa-nw has a full list of products available in Azure Blob Storage.\r\n",
					"\r\n",
					"Let's load up the `SOILSAT_TOP` data variable."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"soil_saturation = ds[\"SOILSAT_TOP\"].load()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"And make a pretty picture"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"fig, ax = plt.subplots(figsize=(16, 10))\r\n",
					"\r\n",
					"soil_saturation.coarsen(x=4, y=4, boundary=\"trim\").mean().plot(ax=ax)\r\n",
					"ax.set(title=\"Soil saturation fraction\")\r\n",
					"plt.savefig(\"noaa-nwm-soil-saturation.png\", bbox_inches=0, pad_inches=0)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Similar files are available for different forecast hours (`f001`, `f002`, ..., `f018`)\r\n",
					"\r\n",
					"These forecasts also include data on channel routing, terrain routing, and reservoir output. The reservoir data can be converted from the NetCDF data model to a tabular data strcture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reservoir = xr.open_dataset(\r\n",
					"    fs.open(\"nwm/nwm.20230123/short_range/nwm.t00z.short_range.reservoir.f001.conus.nc\")\r\n",
					").load()\r\n",
					"reservoir"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import geopandas\r\n",
					"import pyproj\r\n",
					"\r\n",
					"crs = pyproj.CRS.from_cf(reservoir.crs.attrs)\r\n",
					"\r\n",
					"df = reservoir.drop(\"crs\").to_dataframe()\r\n",
					"geometry = geopandas.points_from_xy(df.longitude, df.latitude, crs=crs)\r\n",
					"\r\n",
					"gdf = geopandas.GeoDataFrame(df, geometry=geometry)\r\n",
					"gdf.head()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import contextily\r\n",
					"\r\n",
					"fig, ax = plt.subplots(figsize=(16, 12))\r\n",
					"\r\n",
					"gdf[[\"inflow\", \"geometry\"]].plot(\r\n",
					"    column=\"inflow\",\r\n",
					"    scheme=\"NaturalBreaks\",\r\n",
					"    markersize=5,\r\n",
					"    legend=True,\r\n",
					"    ax=ax,\r\n",
					"    cmap=\"plasma\",\r\n",
					")\r\n",
					"contextily.add_basemap(ax, crs=str(gdf.crs))\r\n",
					"\r\n",
					"ax.set_axis_off()"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Other kinds data are available under each date's prefix. Some sub-folders different kinds of data (forcings, long- and medium-range forecasts, etc.) and some cover different regions (Hawaii and Puerto Rico)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fs.ls(prefix)"
				]
			}
		]
	}
}